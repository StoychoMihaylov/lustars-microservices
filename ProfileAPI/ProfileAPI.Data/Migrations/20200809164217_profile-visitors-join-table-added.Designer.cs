// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProfileAPI.Data.Context;

namespace ProfileAPI.Data.Migrations
{
    [DbContext(typeof(ProfileDBContext))]
    [Migration("20200809164217_profile-visitors-join-table-added")]
    partial class profilevisitorsjointableadded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ProfileAPI.Data.Entities.GeoLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("PostCode")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("GeoLocations");
                });

            modelBuilder.Entity("ProfileAPI.Data.Entities.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ProfileAPI.Data.Entities.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("ProfileAPI.Data.Entities.Like", b =>
                {
                    b.Property<Guid>("LikeFromId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LikeToId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("onDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("LikeFromId", "LikeToId");

                    b.HasIndex("LikeToId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("ProfileAPI.Data.Entities.ProfileVisitor", b =>
                {
                    b.Property<Guid>("VisitorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VisitedId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("onDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("VisitorId", "VisitedId");

                    b.HasIndex("VisitedId");

                    b.ToTable("ProfileVisitor");
                });

            modelBuilder.Entity("ProfileAPI.Data.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarImage")
                        .HasColumnType("text");

                    b.Property<string>("BiographyAndInterests")
                        .HasColumnType("character varying(3000)")
                        .HasMaxLength(3000);

                    b.Property<bool>("CommunicationAndUnderstanding")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Credits")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("DoSport")
                        .HasColumnType("boolean");

                    b.Property<bool>("DrinkAlcohol")
                        .HasColumnType("boolean");

                    b.Property<string>("EducationDegree")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailNotificationsSubscribed")
                        .HasColumnType("boolean");

                    b.Property<string>("FeelInMood")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Figure")
                        .HasColumnType("text");

                    b.Property<bool>("FinancialStability")
                        .HasColumnType("boolean");

                    b.Property<string>("FromCity")
                        .HasColumnType("text");

                    b.Property<string>("FromCountry")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("GrowingFamily")
                        .HasColumnType("boolean");

                    b.Property<bool>("HaveKids")
                        .HasColumnType("boolean");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("HowOftenDoSport")
                        .HasColumnType("text");

                    b.Property<string>("HowOftenDrinkAlcohol")
                        .HasColumnType("text");

                    b.Property<string>("HowOftenSmoke")
                        .HasColumnType("text");

                    b.Property<bool>("IsUserProfileActivated")
                        .HasColumnType("boolean");

                    b.Property<bool>("KeepTraditions")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("LookingFor")
                        .HasColumnType("text");

                    b.Property<bool>("LoveForAnimals")
                        .HasColumnType("boolean");

                    b.Property<int>("LustarLikes")
                        .HasColumnType("integer");

                    b.Property<string>("MeritalStatus")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<bool>("OppositeAttracs")
                        .HasColumnType("boolean");

                    b.Property<int>("PartnerAgeRangeFrom")
                        .HasColumnType("integer");

                    b.Property<int>("PartnerAgeRangeTo")
                        .HasColumnType("integer");

                    b.Property<bool>("PartnerDoSport")
                        .HasColumnType("boolean");

                    b.Property<bool>("PartnerDrinkAlcohol")
                        .HasColumnType("boolean");

                    b.Property<string>("PartnerFigure")
                        .HasColumnType("text");

                    b.Property<bool>("PartnerHaveKids")
                        .HasColumnType("boolean");

                    b.Property<bool>("PartnerSmoke")
                        .HasColumnType("boolean");

                    b.Property<bool>("PartnerVisualAppearance")
                        .HasColumnType("boolean");

                    b.Property<bool>("SameInterests")
                        .HasColumnType("boolean");

                    b.Property<bool>("Sex")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShareSameReligion")
                        .HasColumnType("boolean");

                    b.Property<bool>("Smoker")
                        .HasColumnType("boolean");

                    b.Property<bool>("Trust")
                        .HasColumnType("boolean");

                    b.Property<string>("University")
                        .HasColumnType("text");

                    b.Property<bool>("WantKids")
                        .HasColumnType("boolean");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.Property<string>("Work")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("ProfileAPI.Data.Entities.GeoLocation", b =>
                {
                    b.HasOne("ProfileAPI.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("GeoLocations")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ProfileAPI.Data.Entities.Image", b =>
                {
                    b.HasOne("ProfileAPI.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("Images")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ProfileAPI.Data.Entities.Language", b =>
                {
                    b.HasOne("ProfileAPI.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("Languages")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ProfileAPI.Data.Entities.Like", b =>
                {
                    b.HasOne("ProfileAPI.Data.Entities.UserProfile", "LikeFrom")
                        .WithMany("WhoILiked")
                        .HasForeignKey("LikeFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfileAPI.Data.Entities.UserProfile", "LikeTo")
                        .WithMany("Likes")
                        .HasForeignKey("LikeToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfileAPI.Data.Entities.ProfileVisitor", b =>
                {
                    b.HasOne("ProfileAPI.Data.Entities.UserProfile", "Visited")
                        .WithMany("ProfileVisits")
                        .HasForeignKey("VisitedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfileAPI.Data.Entities.UserProfile", "Visitor")
                        .WithMany("VisitedProfiles")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
